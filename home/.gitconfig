[user]
	name = Daryl Roberts
	email = d@rbrts.io

[github]
  user = drbrts
  token = 559c9cc8fb5b0e086efa60d5df8851e0b8660dc7

[core]
  # Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
  whitespace = space-before-tab,trailing-space

  # Change the pager to `cat`
  pager = cat

[alias]
  # View the SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # View the current working tree status using the short format
  s  = status -s
  st = status

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
  dc = diff --cached
  df = diff
  ks = difftool
  ksc = difftool --cached
  dno = diff --name-only
  dns = diff --name-status
  dom = diff origin/master
  domns = diff origin/master --name-status
  domno = diff origin/master --name-only
  bdiff = !git diff $(git merge-base $(git cb) master) $(git cb)
  bdno = !git dno $(git merge-base $(git cb) master) $(git cb)
  bdns = !git dns $(git merge-base $(git cb) master) $(git cb)

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"
  pom = !git fetch && git pull origin master
  pob = !git fetch && git pull origin $(git cb)

  # Clone a repository including all submodules
  cl = clone --recursive

  # Cleanup
  hard = reset --hard
  dfq = clean -dfq
  dmp = !git dump
  dump = !cd $(git root) && git dfq && git hard && git com && git pom

  # Commits
  ca = !git add -A && git commit -av
  cam = "!f(){ git commit -am \"$@ ($(git cb))\"; }; f"
  ci = commit
  cia = commit -a
  cin = commit --no-edit
  cim = "!f(){ git commit -m \"$@ ($(git cb))\"; }; f"
  cma = commit --amend

  # Switch to a branch, creating it if necessary
  # go = checkout -B
  go = "!f(){ (git show-ref -q \"$1\" && git checkout \"$1\" ) || git checkout -b \"$1\"; }; f"
  co = checkout
  com = checkout master
  coh = checkout HEAD
  comp = !git com && git fetch && git mom

  # Merging
  ff = merge --ff-only
  nf = merge --no-ff
  mom = merge origin master
  rom = !git fetch && git rebase origin/master
  rmm = !git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v
  cb = !git symbolic-ref HEAD | sed s,refs/heads/,,
  repo = !git rev-parse --show-toplevel 2>/dev/null | sed s,$HOME/src/,,
  st = status
  root = rev-parse --show-toplevel

  # Stashes
  sl = stash list
  sp = stash pop

  # Show files ignored by git:
  ign = ls-files -o -i --exclude-standard

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Branching
  br = branch
  short = log -n1 --format=%h

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = nowarn

[color]
  # Use colors in Git commands that are capable of colored output when outputting to the terminal
  ui = true

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[branch "master"]
  remote = origin
  merge = refs/heads/master

# URL shorthands
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
  insteadOf = "github:"

[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
  insteadOf = "gist:"

[push]
  default = matching

[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true

[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true
[diff]
	tool = Kaleidoscope
[difftool]
	prompt = false
[mergetool]
	prompt = false
[merge]
	tool = Kaleidoscope
