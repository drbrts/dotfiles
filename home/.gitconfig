[user]
	name = Daryl Roberts
	email = daryl.roberts@gmail.com

[github]
  user = drbrts
  token = 559c9cc8fb5b0e086efa60d5df8851e0b8660dc7

[core]
  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
  whitespace = space-before-tab,indent-with-non-tab,trailing-space

  # Change the pager to `cat`
  pager = cat

[alias]
	# View the SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # View the current working tree status using the short format
	s  = status -s
	st = status

  # Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
  dc = diff --cached
  df = diff
  ks = difftool
  ksc = difftool --cached
  dno = diff --name-only
  dns = diff --name-status

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"
  pom = pull origin master
  pob = !git pull origin $(git cb)

	# Clone a repository including all submodules
	cl = clone --recursive

  # Cleanup
  hard = reset --hard
  dfq = clean -dfq
  dump = !cd $(git root) && git dfq && git hard && git com && git mom

	# Commits
  ca = !git add -A && git commit -av
  cam = "!f(){ git commit -am \"$@ ($(git cb))\"; }; f"
  ci = commit
  cia = commit -a
  cin = commit --no-edit
  cim = "!f(){ git commit -m \"$@ ($(git cb))\"; }; f"
  cma = commit --amend

	# Switch to a branch, creating it if necessary
	go = checkout -B
  co = checkout
  com = checkout master
  comp = !git com && git fetch && git mom

  # Merging
  ff = merge --ff-only
  mom = merge origin master

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
  cb = !git symbolic-ref HEAD | sed s,refs/heads/,,
  repo = !git rev-parse --show-toplevel 2>/dev/null | sed s,$HOME/src/,,
  st = status

  # Stashes
  sl = stash list
  sp = stash pop

  # Show files ignored by git:
  ign = ls-files -o -i --exclude-standard

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Branching
  br = branch

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[color]
	# Use colors in Git commands that are capable of colored output when outputting to the terminal
	ui = true

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
	remote = origin
	merge = refs/heads/master

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"

[push]
	default = matching

[difftool "Kaleidoscope"]
  cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[diff]
  tool = Kaleidoscope

[difftool]
  prompt = false

[mergetool "Kaleidoscope"]
  cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
  trustExitCode = true

[mergetool]
  prompt = false

[merge]
  tool = Kaleidoscope
